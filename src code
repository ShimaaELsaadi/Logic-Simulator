#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <queue>
using namespace std;

class Node {
private:
    string Name;
    bool Value; 

public:

    Node(){}
    Node(string c, bool val) :Name(c), Value(val) {}
////////////////////////////////
    void setName(string Name) {this->Name =Name;}
    void setValue(bool Value) {this->Value = Value;}
/////////////////////////////////
    string getName(){return Name;}
    bool getValue() { return Value;}
    ////////////////////////////
    bool AND(Node a, Node b) {
        bool out = 0;
        if (a.getValue() == 1 && b.getValue() == 1) {out = 1;}
        return out;
    }

    bool OR(Node a, Node b) {bool out = 1;
        if (a.getValue() == 0 && b.getValue() == 0) {
            out = 0;}
        return out;}

    bool XOR(Node a, Node b) {
        bool out = 1;
        if ((a.getValue() == 1 && b.getValue() == 1) || (a.getValue() == 0 && b.getValue() == 0)) {
            out = 0;}
        return out;
    }
friend ostream& operator <<(ostream& out,const Node& n){
    out<<n.Name<<":"<<n.Value<<'\n';
    return out;
}
    
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
////////////////////////
    Gate() {}
    Gate(Node* a, Node* b, Node* c) :Input1(a), Input2(b),OutPut(c) {}
////////////////////////////////
    virtual void setInput1(bool Input1) {}
    virtual void setInput2(bool Input2) {}
    virtual void setOutNode(Node* node) {}
/////////////////////////////////////
    virtual Node* getInput1() {return Input1;}
virtual Node* getInput2() {return Input2;}
 virtual Node* getOutNode() {return OutPut;}
/////////////////////////////////////////////
    virtual void simulateGate() {}
};
//////////////////////////////////////
class AND :public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    
    AND(Node* a, Node* b) :Input1(a), Input2(b) {}
    void setInput1(bool Input1) { this->Input1->setValue(Input1);}
    void setInput2(bool Input2) {this->Input2->setValue(Input2);}
    void setOutNode(Node*OutPut) {this->OutPut =OutPut;}
///////////////////////////////////
    Node* getInput1() { return Input1;}
    Node* getInput2() {return Input2;}
    Node* getOutNode() {return OutPut;}
/////////////////////////////////////////
    void simulateGate()
    {if (Input1->getValue() == 1 && Input2->getValue() == 1) {OutPut->setValue(1);}
        else {OutPut->setValue(0);}
    }
};
//////////////////////////////////////
class OR :public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:

    OR(Node* a, Node* b) : Input1(a), Input2(b) {}
    ////////////////////////////
    void setInput1(bool Input1) {this->Input1->setValue(Input1);}
    void setInput2(bool Input2) {this->Input2->setValue(Input2);}
    void setOutNode(Node*OutPut) {this->OutPut =OutPut;}
/////////////////////////////
    Node* getInput1() {return Input1;}
    Node* getInput2() {return Input2;}
Node* getOutNode() {return OutPut;}
////////////////////////////////////////////
    void simulateGate()
    {
        if (Input1->getValue() == 0 && Input2->getValue() == 0) {
           OutPut->setValue(0);
        }
        else {
           OutPut->setValue(1);
        }
    }
};

class XOR : public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    

    XOR(Node* a, Node* b) :Input1(a), Input2(b) {
        
    }
    void setInput1(bool Input1) {
        this->Input1->setValue(Input1);
    }

    void setInput2(bool Input2) {
        this->Input2->setValue(Input2);
    }

    void setOutNode(Node*OutPut) {
        this->OutPut =OutPut;
    }

    Node* getInput1() {
        return Input1;
    }

    Node* getInput2() {
        return Input2;
    }

    Node* getOutNode() {
        return OutPut;
    }
    void simulateGate()
    {
        if ((Input1->getValue() == 0 && Input2->getValue() == 0) || (Input1->getValue() == 1 && Input2->getValue() == 1)) {
           OutPut->setValue(0);
        }
        else {
           OutPut->setValue(1);
        }
    }

};

class NAND : public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    
    NAND(Node* a, Node* b) :Input1(a), Input2(b) {
        
    }
    void setInput1(bool Input1) {
        this->Input1->setValue(Input1);
    }

    void setInput2(bool Input2) {
        this->Input2->setValue(Input2);
    }

    void setOutNode(Node*OutPut) {
        this->OutPut =OutPut;
    }

    Node* getInput1() {
        return Input1;
    }

    Node* getInput2() {
        return Input2;
    }

    Node* getOutNode() {
        return OutPut;
    }
    void simulateGate()
    {
        if (Input1->getValue() == 1 && Input2->getValue() == 1) {
           OutPut->setValue(0);
        }
        else {
           OutPut->setValue(1);
        }
    }

};

class XNOR : public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    
XNOR(Node* a, Node* b) :Input1(a), Input2(b) {
    
    }
    void setInput1(bool Input1) {
        this->Input1->setValue(Input1);
    }

    void setInput2(bool Input2) {
        this->Input2->setValue(Input2);
    }

    void setOutNode(Node*OutPut) {
        this->OutPut =OutPut;
    }

    Node* getInput1() {
        return Input1;
    }

    Node* getInput2() {
        return Input2;
    }

    Node* getOutNode() {
        return OutPut;
    }
    void simulateGate()
    {
        if ((Input1->getValue() == 0 && Input2->getValue() == 0) || (Input1->getValue() == 1 && Input2->getValue() == 1)) {
           OutPut->setValue(1);
        }
        else {
           OutPut->setValue(0);
        }
    }


};

class NOT : public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    NOT(Node* a, Node* b) :Input1(a), Input2(b) {}
    
    void setInput1(bool Input1) {this->Input1->setValue(Input1);}
    void setInput2(bool Input2) {this->Input2->setValue(Input2);}
    void setOutNode(Node*OutPut) {this->OutPut =OutPut;}
    
    Node* getInput1() {return Input1; }
    Node* getInput2() {
        return Input2;}
    Node* getOutNode() { return OutPut;}
    
    
    void simulateGate()
    {
       OutPut->setValue(!Input1->getValue());
    }

};

class NOR : public Gate {
private:
    Node* Input1;
    Node* Input2;
    Node*OutPut;

public:
    NOR(Node* a, Node* b) :Input1(a), Input2(b) {}
    void setInput1(bool Input1) { this->Input1->setValue(Input1);}
    void setInput2(bool Input2) {this->Input2->setValue(Input2);}
    void setOutNode(Node*OutPut) {this->OutPut =OutPut;}
    //////
    Node* getInput1() {return Input1;}
    Node* getInput2() {return Input2;}
    Node* getOutNode() {return OutPut;}

    void simulateGate()
    {if (Input1->getValue() == 0 && Input2->getValue() == 0) { OutPut->setValue(1);}
        else {OutPut->setValue(0);}
    }
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class simulator {
private:
    vector<Node*> nArray = {};
    vector<Gate*> gArray = {};

public:
void postNode(Node* n) {nArray.push_back(n);}
    void postGate(Gate* g) {gArray.push_back(g);}
    Node* FindNode(string node)
    {
        Node* ptr = nullptr;
        for (size_t i = 0; i < nArray.size(); i++) {
            if (nArray[i]->getName() == node) {
                ptr = nArray[i];
            }
        }
        return ptr;
    }

    void startSimulate() {
        for (size_t i = 0; i < gArray.size(); i++)
        {
            gArray[i]->simulateGate();
        }
    }

    vector<Node*> getNodes() {
        return nArray;
    }

    vector<Gate*> getGates()
    {
        return gArray;
    }

};
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class GateGenerator {
private:
    simulator sim;
    queue<pair<string, bool>>q1;
public:
    
    
/////////////////////////////////////////
    void outFormat(pair<string, bool> p)
    {
        string f = p.first;
        bool s = p.second;
        cout << f << ": " << s << endl;
    }  
void printNode(){
        while(!q1.empty())
        {outFormat(q1.front());
            q1.pop();}}
    //////////////////////////////////////
Node* createNode(string s) {
        Node* N = new Node(s,0);
        return N;}
Gate* createGate(string s, Node* x, Node* y)
    {
        if (s == "AND") {
            AND* G = new AND(x, y);
            return G;}
        if (s == "OR") {
            OR* G = new OR(x, y);
            return G;
        }
        if (s == "NOT") {
            NOT* G = new NOT(x, y);
            return G;
        }
        if (s == "NAND") {
            NAND* G = new NAND(x, y);
            return G;
        }
        if (s == "XOR") {
            XOR* G = new XOR(x, y);
            return G;
        }
        if (s == "XNOR") {
            XNOR* G = new XNOR(x, y);
            return G;
        }
        if (s == "NOR") {
            NOR* G = new NOR(x, y);
            return G;
        }
        else {return nullptr;}
    }
   /////////////////////////////////////////////////////////////////////////////// 
    void parseInput(string s) {
        if (s == "AND" || s == "OR" || s == "NOR" || s == "NAND" || s == "XOR" || s == "XNOR") {
            string a;
            cin >> a;
            if (!sim.FindNode(a))
            {
                Node* N1 = createNode(a);
                sim.postNode(N1);
            }
            string b;
            cin >> b;
            if (!sim.FindNode(b)) 
            {
                Node* N2 = createNode(b);
                sim.postNode(N2);
            }
            string c;
            cin >> c;
            if (!sim.FindNode(c))
            {
                Node* N3 = createNode(c);
                sim.postNode(N3);
            }
            Gate* G = createGate(s, sim.FindNode(a), sim.FindNode(b));
            G->setOutNode(sim.FindNode(c));
            sim.postGate(G);
        }
        else if (s == "NOT") {
            string a;
            cin >> a;
            if (!sim.FindNode(a))
            {
                Node* N1 = createNode(a);
                sim.postNode(N1);
            }
            string b;
            cin >> b;
            if (!sim.FindNode(b))
            {
                Node* N2 = createNode(b);
                sim.postNode(N2);
            }
            Gate* G = createGate(s, sim.FindNode(a), sim.FindNode(b));
            G->setOutNode(sim.FindNode(b));
            sim.postGate(G);
        }
        else if (s == "SET") {
            string a;
            cin >> a;
            bool x;
            cin >> x;
            sim.FindNode(a)->setValue(x);
        }
        else if (s == "SIM") {
            sim.startSimulate();
        }
        else if (s == "OUT") {
            string s;
            cin >> s;
            if (s != "ALL")
            { pair<string, bool>p1;
                p1.first = sim.FindNode(s)->getName();
                p1.second = sim.FindNode(s)->getValue();
                q1.push(p1);}
            else {
                for (size_t i = 0; i < sim.getNodes().size(); i++) {
                    pair<string, bool>p1;
                    p1.first = sim.getNodes()[i]->getName();
                    p1.second = sim.getNodes()[i]->getValue();
                    q1.push(p1);
                }}}}};
///////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
    GateGenerator g;
    string Input;
    while (1)
    {
        if (cin.peek() != EOF)
        {cin >> Input;
            g.parseInput(Input); }

        else
        { break;}
    }
    g.printNode();
}

